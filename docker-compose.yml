version: "3.8"

services:
  apollo:
    image: hrbolek/apollo_federation:latest
    environment:
      - PORT=3000
      - |
        SERVICES=
        [
          {
            "name": "gql_workflow",
            "url": "http://gql_workflow:8000/gql/"
          }
    depends_on:
      # kontejnery, ktere musi byt spusteny drive
      - gql_workflow
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:3000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
        # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
      - "33000:3000" # vnejsi port : port, kde sluzbu poskytuje kontejner

  gql_workflow:
    image: gql_workflow
    build:
      # context definuje cestu k popisu
      context: ./gql_workflow
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_DB=data
      - DEMO=true
    depends_on:
      - postgres
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    deploy:
        restart_policy:
            condition: on-failure
            max_attempts: 3
            # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - "31123:8000"

  postgres:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      # promenne, ktere lze cist v kontejneru
      - PGADMIN_DEFAULT_EMAIL=anoyne@anywhere.com
      - PGADMIN_DEFAULT_PASSWORD=example
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - "31122:80"
